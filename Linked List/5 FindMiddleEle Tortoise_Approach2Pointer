
//T.C: (n)
//we are finding ans in single pass. Thus faster than brute force

#include <iostream>

using namespace std;

class Node{
  public:  
    int data;
    Node* next;

    Node(int data){
      this->data = data;
      this->next = NULL;
    }
};

void print(Node* &head){

  Node* temp = head;
  while(temp!= NULL){
    cout<<"\t"<<temp->data;
    temp = temp->next;
  }
}

Node* getMiddle(Node* &head){
//ll is empty
  if(head == NULL){
    cout<<"\nLL is empty";
  }
  //ll has only 1 node
  if(head->next == NULL){
    return head;
  }
  //ll has more than 1 node
  Node* slow;
  Node* fast;

  slow = head;
  fast = head;
  //fast = head->next //if want to get first among 2 middle elements in case of even length ll 
  
  
  while(slow != NULL && fast != NULL){
    fast = fast->next;
    if(fast != NULL){
      fast = fast->next;
      slow = slow->next;
    }
    
  }
  return slow;
  
}

int main() {

  Node* head = new Node(10);
  Node* second = new Node(20);
  Node* third = new Node(30);
  Node* fourth  = new Node(40);
  Node* fifth = new Node(50);
  Node* sixth = new Node(60);
  head ->next = second;
  second->next = third;
  third->next = fourth;
  fourth->next = fifth;
  fifth->next = sixth;
  sixth->next = NULL;
  
  print(head);

  cout<<"\nmiddle node is : "<<getMiddle(head)->data;
  
}
