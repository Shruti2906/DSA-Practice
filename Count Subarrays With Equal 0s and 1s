//Count subarrays with equal number of 1’s and 0’s - GFG



//Basic idea behind the logic is if we found the same sum it means that there must exist an subarray/subarrays(depends on frequency of ocuurance) with equal 0s and 1s. 

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution{
  public:
    //Function to count subarrays with 1s and 0s.
    long long int countSubarrWithEqualZeroAndOne(int arr[], int n)
    {
        //Your code here
        map <int,int> mp; //store the ocuurance/frequency of sum in map
        
        int sum = 0;
        int count = 0; 
        
        for(int i=0; i<n; i++){
            
            //set every 0 to -1
            if(arr[i] == 0){
                arr[i] = -1;
            }
            
            //sum from previous sum till i (i.e from index 0 till i)
            sum = sum+arr[i];
            
            //sum==0 means subarray has equal 0s and 1s
            if(sum == 0){
                count++;
            }
            
            //if the same sum has occurred before as well then add the no of its ocuurance/frequency to count
            //it means that many time the subarrays are there with equal 0s and 1s
            if(mp[sum]){
                count += mp[sum];
            }
            
            //update the occurance of sum in map
            mp[sum]++;
        }
        
        return count;
    }
};

//{ Driver Code Starts.

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	int n,i;
	cin>>n;
	int arr[n];
	for(i=0;i<n;i++)
	cin>>arr[i];
	Solution obj;
	cout<< obj.countSubarrWithEqualZeroAndOne(arr, n)<<"\n";
	}
	return 0;
}

// } Driver Code Ends
