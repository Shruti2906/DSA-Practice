
//Find first and last positions of an element in a sorted array
//Left most and right most index or Position or occurance- GFG
//T.C O(log n)
//s.c O(1)

class Solution {
public:
    int leftMost(vector<int> v, int x){
        
        int ans = -1;
        int start = 0;
        int end = v.size()-1;
        int mid = start+(end-start)/2;
        
        while(start <= end){
            if(x == v[mid]){
                ans = mid;
                end = mid-1;
            }
            else if(x < v[mid]){
                end = mid-1;
                
            }
            else{
                start = mid+1;
            }
            mid = start+(end-start)/2;
        }
        return ans;
    }
    
    int rightMost(vector<int> v, int x){
        
        int ans = -1;
        int start =  0;
        int end = v.size()-1;
        int mid = start+(end-start)/2;
        
        while(start <= end){
            if(x == v[mid]){
                ans = mid;
                start = mid+1;
            }
            else if(x < v[mid]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
            mid = start+(end-start)/2;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
       
        vector<int> vec;
        vec.push_back(leftMost(nums, target));
        vec.push_back(rightMost(nums, target));
        
        return vec;
    }
};

//.................................................................................................................................................//
    
    //34. Find First and Last Position of Element in Sorted Array - Leetcode
    
    class Solution {
public:
    int leftMost(vector<int> v, int x){
        
        int ans = -1;
        int start = 0;
        int end = v.size()-1;
        int mid = start+(end-start)/2;
        
        while(start <= end){
            if(x == v[mid]){
                ans = mid;
                end = mid-1;
            }
            else if(x < v[mid]){
                end = mid-1;
                
            }
            else{
                start = mid+1;
            }
            mid = start+(end-start)/2;
        }
        return ans;
    }
    
    int rightMost(vector<int> v, int x){
        
        int ans = -1;
        int start =  0;
        int end = v.size()-1;
        int mid = start+(end-start)/2;
        
        while(start <= end){
            if(x == v[mid]){
                ans = mid;
                start = mid+1;
            }
            else if(x < v[mid]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
            mid = start+(end-start)/2;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
       
        vector<int> vec;
        vec.push_back(leftMost(nums, target));
        vec.push_back(rightMost(nums, target));
        
        return vec;
    }
};
