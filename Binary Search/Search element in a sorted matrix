
//74. Search a 2D Matrix - Leetcode
//T.C O(log n + log m)  S.C: O(1)

//approach:
//first check row in which target may present- (apply binary seach for finding this row)
//  set s = 0, e = end_row, mid, move mid by comparing value of target with first and last element of row(matrix[mid][0], matrix[mid][m-1]).
//if row is found then apply binary search on that row return the result.


class Solution {
public:
    bool binarySearch(vector<vector<int>>& matrix, int row, int target){
        
        int s = 0;
        int e = matrix[row].size()-1;
        int mid = s+(e-s)/2;
         while(s <= e){
             
             if(target == matrix[row][mid]){
                 return true;
             }
             else if(target > matrix[row][mid]){
                 s = mid + 1;
             }
             else{
                 e = mid-1;
             }
             
             mid = s+(e-s)/2;
         }
        return false;
    }
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
     
       // int n = matrix.length();
       // int m = matrix[mid].size()-1;
        
        int s = 0;  //pointing to first row
        int e = matrix.size()-1;   //pointing to end row
        int mid = s+(e-s)/2;
        
        while(s <= e){
     //check if target may present(if exist in matrix) in row- by comparing with first and last element of row.
          if(target>=matrix[mid][0] && target<=matrix[mid][matrix[mid].size()-1]){    //i.e(matrix[mid][n] && matrix[mid][m])
                return binarySearch(matrix, mid, target);
            }
    //if target is > row(matrix[mid][0]) where mid is pointing then target may lie in right part.
            else if(target > matrix[mid][0]){      
                s = mid+1;
            }
            else{
                e = mid-1;
            }
            mid = s+(e-s)/2;
        }
        return false;
    }
};
