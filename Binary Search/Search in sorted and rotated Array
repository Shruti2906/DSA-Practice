//Binary Search
//Search an element in a sorted and rotated Array - GFG
//First findput pivot element then apply binary search on two arrays(left of pivot and right of pivot)
//T.C: O(log n) S.C O(1)

#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    int findPivot(int arr[], int l, int h){

        int s = l;
        int e = h;
        int mid = s+(e-s)/2;
    
        while(s <= e){
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1]){
                return mid;
            }
            else{
                if(arr[mid]>arr[0]){
                    s = mid+1;
                }
                else{
                    e = mid-1;
                }
            }
            mid = s+(e-s)/2;
        }
        return -1;
    }
    
    int binarySearch(int A[], int l, int h, int key){
        
        int mid = l+(h-l)/2;
        while(l<=h){
            if(key == A[mid]){
                return mid;
            }
            else if(key < A[mid]){
                h = mid-1;
            }
            else{
                l = mid+1;
            }
            mid = l+(h-l)/2;
        }
        return -1;
        
    }
    int search(int A[], int l, int h, int key){
       
        int pivot = findPivot(A, l, h);
        int leftAns = binarySearch(A, l, pivot, key);
        if(leftAns == -1){
            int rightAns = binarySearch(A, pivot+1, h, key);
            return rightAns;
        }
        else{
            return leftAns;
        }
        
       
    }
};

//{ Driver Code Starts. 
int main() {
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        int A[n];
        for(int i = 0; i < n; i++)
            cin >> A[i];
        int key;
        cin >> key;
        Solution ob;
        cout << ob.search(A, 0, n - 1, key) << endl;
    }
return 0;
}
// } Driver Code Ends
