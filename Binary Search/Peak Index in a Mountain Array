852. Peak Index in a Mountain Array - Leetcode

//1.<arr[peak-1] < arr[peak] > arr[peak+1]
//2.if(arr[mid]<arr[mid+1)) - mid lie in left side of peak - need to set s = mid+1
//3.if(arr[mid]>arr[mid+1)) - mid lie in right side of peak - need to set e = mid-1

//T.C: O(logn) S.C: O(1)

-----1: 
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
     
        int s = 0;
        int e = arr.size()-1;
        int mid = s+(e-s)/2;
        
        while(s <= e){
            
            if(mid == 0){ //cheking for 0-1 index would cause runtime error
                s = mid+1;
            }
            else if(mid == arr.size()-1){
                e = mid-1;
            }
            else if((arr[mid]>arr[mid-1]) && (arr[mid]>arr[mid+1])){
                return mid;
            }
            else if(arr[mid] < arr[mid+1]){
                s = mid+1;
            }
            else{
                e = mid-1;
            }
            mid = s+(e-s)/2;
        }
        return -1;
    }//else if((mid != arr.size()-1) && (arr[mid] < arr[mid+1] |mid == 0|)){
};

-----2: 

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        
        int start=0;
        int end=arr.size()-1;
        int mid = start+(end-start)/2;
        while(start<end)
        {
            if(arr[mid]<arr[mid+1]){
                start=mid+1;
            }
            else {
               end= mid;
            }
            mid=start+(end-start)/2;
        }
        return mid;
    }
};
//Note:  both above solutions are sumitted by me after a gap of months both use same approach to solve the problem.
